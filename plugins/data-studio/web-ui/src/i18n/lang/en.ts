export default {
  common: {
    name: 'name',
    error: 'error',
    loadData: 'Loading data, please wait...',
    sorry: 'SORRY',
    noPermissionPage: 'You do not have permission to access the page',
    pageNotFound: 'Page Not Found',
    checkURL:
      'Please check whether the URL you entered is correct, or click the button below to return to the home page.',
    backHome: 'Back to Home',
    confirm: 'If you confirm',
    systemPrompt: 'System prompt',
    loginExpired: 'Login status has expired, please log in again',
    signInAgain: 'Sign in again',
    all: 'all',
    save: 'save',
    notSave: 'not save',
    page: 'page',
    serialNumber: 'Serial No',
    attribute: 'attribute',
    value: 'value',
    if: '?',
    colon: ':',
  },
  success: 'success',
  button: {
    confirm: 'confirm',
    clear: 'clear',
    reset: 'reset',
    cancel: 'cancel',
    save: 'save',
    enabled: 'enabled',
    disabled: 'disabled',
    status: 'status',
    export: 'export',
    delete: 'delete',
    create: 'create',
  },
  utils: {
    colorError: 'Wrong {name} color value',
  },
  rules: {
    empty: '{0} is required',
    enter: '请输入{0}',
    charLength: 'The length cannot exceed {count} characters',
    integer: '{0} must be integer',
  },
  message: {
    success: 'success',
    fail: 'fail',
    deleteFile: 'Successfully deleted, please refresh the connection list!',
    connectSuccess: 'Connection succeeded!',
    createSuccess: 'created successfully!',
    disconnectSuccess: 'Disconnected successfully!',
    editSuccess: 'Edit successfully',
    deleteSuccess: 'Remove successfully!',
    setSuccess: 'Setting successfully!',
    noConnectionAvailable: 'No connection available',
    deleteConnectInfo0: 'The current connection has been established and cannot be deleted!',
    deleteConnectInfo1: 'Are you sure you want to remove the connection information?',
    disConnect:
      'Disconnecting the database may cancel all database operations in progress. Are you sure you want to disconnect {name}?',
    deleteConnect:
      'All databases will be disconnected before deleting the connection. Are you sure you want to delete the {name} server?',
    deleteDatabase:
      'The connection will be disconnected before deleting the database. Are you sure you want to delete the {name} database?',
    deleteMode: 'Are you sure you want to delete the {name} mode?',
    saveData: 'There is unsaved data in table {name}. Do you need to save the changes?',
    selectedData: 'Please select data',
    editTableGuide:
      'The table does not define a unique physical key: {name},<br/>To continue, please define a unique key!',
    enterValue: 'Please enter the corresponding value!',
    leastOneColumn: 'Must have at least one column!',
    reindexTable: 'Whether to reindex:{name}?',
    truncateTable: 'Whether to truncate table: {name}?',
    vacuumTable: 'Whether to vacuum table: {name}, and free up space?',
    dropTable: 'Whether to drop table: {name}?',
    renameTableTips: 'Enter a new name for the {name} table',
    setTableDescription: 'Enter new description for table {name}',
    setTablespace: 'Select a new tablespace for table {name}',
    setTableSchema: 'Select a new schema name for table {name}',
    debugCannotFinish:
      'There is a running debugging program, please end or interrupt debugging first!',
  },
  week: {
    Sunday: 'Sun',
    Monday: 'Mon',
    Tuesday: 'Tue',
    Wednesday: 'Web',
    Thursday: 'Thu',
    Friday: 'Fri',
    Saturday: 'Sat',
  },
  siderbar: {
    properties: 'properties',
    table: {
      showRelatedSequence: 'show related sequence',
      reindex: 'reindex table',
      truncate: 'truncate table',
      vacuum: 'vacuum table',
      setDescription: 'set table description',
      setTablespace: 'set tablespace',
      setSchema: 'set schema',
    },
  },
  database: {
    database: 'database',
    open: 'open connection',
    close: 'disconnect',
    create: 'create database',
    edit: 'edit database properties',
    remove: 'remove database',
    property: 'show database properties',
    name: 'database name',
    encoder: 'database encoder',
    compatibleType: 'compatible type',
    collation: 'collation',
    characterType: 'character type',
    conRestrictions: 'connection restrictions',
    connect: 'connect to database',
    list: 'database List',
    placeholder: 'Please enter the filter database object',
    regular_table: 'regular table',
    function_process: 'function/process',
    view: 'view',
    synonym: 'synonym',
    sequence: 'sequence',
    attribute: 'attribute',
    value: 'value',
    info: {
      name: 'datname',
      encoding: 'encoding',
      datallowconn: 'datallowconn',
      datconnlimit: 'datconnlimit',
      dattablespace: 'dattablespace',
      datcollate: 'datcollate',
      datctype: 'datctype',
    },
  },
  connection: {
    name: 'connection name',
    new: 'new connection',
    edit: 'edit connection',
    delete: 'remove connection',
    deleteInfo: 'remove connection info',
    disAllconnection: 'disconnect all',
    props: 'connection props',
    info: 'infomation',
    refresh: 'refresh',
    version: 'version',
    source: 'source',
    contentCenter: 'content center',
    customConnection: 'custom connection',
    database: 'database',
    databaseType: 'database type',
    databaseType_holder: 'Please select a database type',
    host: 'host',
    port: 'port',
    username: 'username',
    password: 'password',
    maximum: 'Maximum',
    attribute: 'attribute',
    value: 'value',
    attribute_table: {
      name: 'connection name',
      host: 'host',
      port: 'port',
      username: 'username',
      ip: 'database IP',
      type: 'database Type',
      version: 'version',
    },
    rules: {
      host: ['The value does not conform to the host range'],
      port: ['The value does not conform to the port range'],
    },
    success: {
      create: 'Connection succeeded',
      edit: 'Modification succeeded',
    },
  },
  create: {
    mode: 'create mode',
    table: 'create table',
    function: 'create function',
    process: 'create process',
    sql: 'create sql',
    anonymous: 'anonymous block',
    view: 'create view',
    synonym: 'create synonym',
    sequence: 'create sequence',
    terminal: 'create terminal',
    openNewTerminal: 'open new terminal',
  },
  edit: {
    mode: 'edit mode',
  },
  delete: {
    mode: 'delete mode',
    table: 'drop table',
    functionSP: 'delete function/process',
    view: 'delete view',
    synonym: 'delete synonym',
    sequence: 'delete sequence',
  },
  rename: {
    mode: 'rename mode',
    table: 'rename table',
  },
  export: {
    ddl: 'export DDL',
    ddlData: 'export DDL and data',
    tableData: 'export table data',
  },
  windows: {
    list: 'windows',
    placeholder: 'Please enter a window name',
    refresh: 'refresh tab',
    closeCurrentTab: 'close current tab',
    closeOtherTab: 'close other tabs',
    closeAllTab: 'close all tabs',
    home: 'Operation/Display',
  },
  functionBar: {
    compile: 'compile',
    execute: 'execute',
    stopRun: 'stop',
    clear: 'clear',
    startDebug: 'startDebug',
    stopDebug: 'stopDebug',
    continueStep: 'continue',
    singleStep: 'singleStep',
    stepIn: 'stepInto',
    stepOut: 'stepOut',
    format: 'format',
    coverageRate: 'historicalCoverage',
  },
  resultTab: {
    message: 'Message',
    result: 'Result',
    closeCurrentTab: 'close current tab',
    closeOtherTab: 'close other tabs',
    closeAllTab: 'close all tabs',
  },
  paramsDialog: {
    title: 'Function execution input parameter',
    column: {
      no: 'No',
      parameterName: 'ParameterName',
      dataType: 'DataType',
      value: 'Value',
    },
  },
  coverageDialog: {
    serialNumber: 'Serial Number',
    totalRows: 'Total Rows',
    executionRows: 'Execution Rows',
    totalCoverage: 'Total Coverage',
    allLineNumber: 'All Line Number',
    executionLineNumber: 'Execution Line Number',
    executionCoverage: 'Execution Coverage',
    inputParams: 'Input Params',
    updateTime: 'Update Time',
    deleteMsg: 'Are you sure you want to delete the selected stored procedure query history?',
  },
  debugPane: {
    callStack: 'CallStack',
    callHierarchy: 'CallHierarchy',
    function: 'Function',
    currentLineNumber: 'CurrentLineNumber',
    breakpoint: 'BreakPoint',
    lineNumber: 'LineNumber',
    sentence: 'Sentence',
    variable: 'Variable',
    value: 'value',
    dataType: 'DataType',
    paramType: 'ParamType',
    placeholder: {
      variable: 'Please enter variable name',
    },
  },
  mode: {
    name: 'mode name',
    owner: 'owner',
    description: 'description',
  },
  createTable: {
    tabs: ['General', 'Column', 'Constraint', 'Indexes', 'Parition', 'DDL Preview'],
    normal: 'NORMAL',
    column: 'Column',
    value: 'Value',
    isPartition: 'is Partition Table',
    general: {
      name: 'tableName',
      ifNotExists: 'IF Not EXISTS',
      tableType: 'Table Type',
      withOIDS: 'WITH OIDS',
      tablespace: 'Tablespace',
      fillFactor: 'Fill Factor',
      storage: 'Table Orientation',
      description: 'Description',
    },
    partition: {
      partitionType: 'Partition Type',
      intervalValue: 'Interval Value',
      partitionDefinition: 'Partition Definition',
      partitionColumn: 'Partition Column',
      partitionName: 'Partition Name',
      partitionValue: 'Partition Value',
      definePartitionValue: 'Define Partition Value',
      tablespace: 'Tablespace',
    },
  },
  table: {
    title: 'Table',
    description: 'Description',
    customUniqueKey: 'Custom Unique Key',
    editTableGuide: 'Edit Table Data Wizard',
    tablespace: 'tablespace',
    general: {
      title: 'General',
    },
    column: {
      title: 'Column',
      columnName: 'ColumnName',
      dataType: 'DataType',
      canBeNull: 'CanBeNotEmpty',
      defaultValue: 'Default',
      isUnique: 'IsUnique',
      arrayDimensions: 'ArrayDimensions',
      precisionSize: 'Precision/Size',
      range: 'Range',
      description: 'Description',
    },
    constraint: {
      title: 'Constraint',
      constrainColumn: 'ConstrainColumn',
      constrainName: 'ConstrainName',
      columnName: 'ColumnName',
      constrainType: 'ConstrainType',
      expression: 'Expression',
      isDeffered: 'IsDeffered',
      schema: 'Schema',
      tablespace: 'Tablespace',
      description: 'Description',
    },
    indexes: {
      title: 'Indexes',
      indexColumn: 'IndexColumn',
      indexName: 'IndexName',
      columnName: 'ColumnName',
      isUnique: 'IsUnique',
      accessMethod: 'AccessMethod',
      expression: 'Expression',
      tablespace: 'Tablespace',
      description: 'Description',
    },
    data: {
      title: 'Data',
    },
    export: {
      selectColumns: 'Select Columns',
      format: 'Format',
      quotes: 'Quotes',
      escape: 'Escape',
      replaceNullWith: 'Replace NULL With',
      encoding: 'Encoding',
      includeHeader: 'Include Header',
      delimiter: 'Delimiter',
      comma: 'Comma',
      tab: 'Tab',
      pipe: 'Pipe',
      semicolon: 'Semicolon',
      other: 'Other',
    },
  },
  view: {
    base: 'base',
    preview: 'SQL preview',
    name: 'name',
    type: 'type',
    view: 'view',
    materializedView: 'materialized view',
    objectMode: 'objectMode',
    code: 'code',
  },
  sequence: {
    base: 'base',
    preview: 'SQL preview',
    name: 'name',
    increment: 'increment',
    startValue: 'start value',
    minValue: 'min value',
    maxValue: 'max value',
    cacheValue: 'cache value',
    cycle: 'cycle',
    belongObject: 'belong object',
    mode: 'mode',
    table: 'table',
    column: 'column',
  },
  synonym: {
    base: 'base',
    preview: 'SQL preview',
    name: 'name',
    objectOwner: 'object owner',
    objectType: 'object type',
    objectName: 'object name',
    rplaceExistingSynonyms: 'replace existing synonyms',
    attribute: {
      serialNo: 'Serial No',
      attr: 'Attribute',
    },
  },
};
