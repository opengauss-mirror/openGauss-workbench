export default {
  common: {
    name: 'Name',
    type: 'Type',
    warning: 'Warning',
    error: 'Error',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    changePassword: 'Change Password',
    startDate: 'Start Date',
    endDate: 'End Date',
    operationTime: 'Operation Time',
    description: 'Description',
    selectDate: 'Select Date',
    loadData: 'Loading data, please wait...',
    sorry: 'SORRY',
    noPermissionPage: 'You do not have permission to access the page',
    pageNotFound: 'Page Not Found',
    checkURL:
      'Please check whether the URL you entered is correct, or click the button below to return to the home page.',
    backHome: 'Back to Home',
    confirm: 'If you confirm',
    systemPrompt: 'System prompt',
    loginExpired: 'Login status has expired, please log in again',
    signInAgain: 'Sign in again',
    all: 'All',
    save: 'Save',
    notSave: 'Not Save',
    page: 'Page',
    serialNumber: 'No.',
    attribute: 'Attribute',
    value: 'Value',
    selectAll: 'Select All',
    if: '?',
    colon: ':',
    noData: 'No Data',
    donotAskAgain: `Don't ask again`,
    operation: 'Operation',
  },
  page: {
    page: 'Page',
    dataSize: 'Total',
    globalPageSize: 'Global Page Size',
  },
  button: {
    confirm: 'Confirm',
    clear: 'Clear',
    reset: 'Reset',
    cancel: 'Cancel',
    save: 'Save',
    enabled: 'Enabled',
    disabled: 'Disabled',
    status: 'Status',
    import: 'Import',
    export: 'Export',
    add: 'Add',
    delete: 'Delete',
    newBuild: 'New',
    create: 'Create',
    append: 'Append',
    overwrite: 'Overwrite',
    apply: 'Apply',
    hide: 'Hide',
    copy: 'Copy',
    advancedCopy: 'Advanced Copy',
    loadToTerminal: 'Load To Terminal',
    exportToTerminal: 'Export To Terminal',
    saveChanges: 'Save Changes',
    refresh: 'Refresh',
    lock: 'Lock',
    unlock: 'Unlock',
    unlock2: 'Unlock',
    executeUploadFile: 'Execute SQL file',
    search: 'Search',
    advancedSearch: 'Advanced Search',
  },
  utils: {
    colorError: 'Wrong {name} color value',
  },
  rules: {
    empty: '{0} is required',
    enter: 'Please enter {0}',
    charLength: 'The length cannot exceed {count} characters',
    integer: '{0} must be integer',
    chooseFirst: 'Please select {0} first',
  },
  message: {
    success: 'success',
    fail: 'fail',
    deleteFile: 'Successfully deleted, please refresh the connection list!',
    connectSuccess: 'Connection succeeded!',
    createSuccess: 'created successfully!',
    disconnectSuccess: 'Disconnected successfully!',
    editSuccess: 'Edit successfully',
    deleteSuccess: 'Remove successfully!',
    setSuccess: 'Setting successfully!',
    copySuccess: 'Copy Successfully!',
    copyFail: 'Copy failed!',
    enabledSuccess: 'Successfully enabled!',
    disabledSuccess: 'Disabled successfully!',
    uploadSuccess: 'Upload successful',
    uploadFail: 'Upload failed',
    refreshSuccess: 'Refresh successful',
    refreshFail: 'Refresh failed',
    noConnectionSelectorTips: 'Please connect',
    testConnectionSuccess: 'Connected, taking {time}ms',
    testConnectionSuccessTips: 'Current information can be connected',
    testConnectionFailTips: 'The current information cannot be connected',
    noConnectionAvailable: 'No connection available',
    notExistConnection: 'The current connection does not exist!',
    reconnectTips: 'Reconnected, please try again',
    deleteConnectInfo0: 'The current connection has been established and cannot be deleted!',
    deleteConnectInfo1: 'Are you sure you want to remove the connection information?',
    disConnect:
      'Disconnecting the database may cancel all database operations in progress. Are you sure you want to disconnect {name}?',
    deleteConnect:
      'All databases will be disconnected before deleting the connection. Are you sure you want to delete the {name} server?',
    deleteDatabase:
      'The connection will be disconnected before deleting the database. Are you sure you want to delete the {name} database?',
    deleteMode: 'Are you sure you want to delete the {name} schema?',
    deleteRecord: 'Are you sure you want to delete the current record?',
    backfillRecord: 'Are you sure you want to backfill the current record?',
    deleteSnippet: 'Are you sure you want to delete the current snippet?',
    saveData: 'There is unsaved data in table {name}. Do you need to save the changes?',
    selectedData: 'Please select data',
    editTableGuide:
      'The table does not define a unique physical key: {name},<br/>To continue, please define a unique key!',
    enterValue: 'Please enter the corresponding value!',
    leastOneColumn: 'Must have at least one column!',
    analyzeTable: 'Whether to analyze:{name}?',
    reindexTable: 'Whether to reindex:{name}?',
    truncateTable: 'Whether to truncate table: {name}?',
    vacuumTable: 'Whether to vacuum table: {name}, and free up space?',
    dropTable: 'Whether to drop table: {name}?',
    renameTableTips: 'Enter a new name for the {name} {type}',
    setTableDescription: 'Enter new description for table {name}',
    setTablespace: 'Select a new tablespace for table {name}',
    setTableSchema: 'Select a new schema name for table {name}',
    debugCannotFinish:
      'There is a running debugging program, please end or interrupt debugging first!',
    importSqlSuffixName: 'Please select an SQL file!',
    confirmPasswordNotMatch: 'Entered passwords differ!',
    willDelete: 'Delete: {name}',
    willEnable: 'Enable: {name}',
    willDisable: 'Disable: {name}',
    willCreateCoverageRate:
      'The parameter enable_proc_coverage is not turned on. If you need to view debugging coverage information, please contact the database administrator to turn on the recording switch before debugging. Do you want to continue debugging?',
    noOpenCoverageRate: 'The parameter enable_proc_coverage is not turned on',
  },
  week: {
    Sunday: 'Sun',
    Monday: 'Mon',
    Tuesday: 'Tue',
    Wednesday: 'Web',
    Thursday: 'Thu',
    Friday: 'Fri',
    Saturday: 'Sat',
  },
  conditionalSymbols: {
    '=': '=',
    '!=': '!=',
    '<': '<',
    '<=': '<=',
    '>': '>',
    '>=': '>=',
    contains: 'Contains',
    containsCaseInsensitive: 'Contains (Case Insensitive)',
    doesNotContain: 'Does Not Contain',
    doesNotContainCaseInsensitive: 'Does Not Contain (Case Insensitive)',
    beginsWith: 'Begins With',
    doesNotBeginWith: 'Does Not Begin With',
    endsWith: 'Ends With',
    doesNotEndWith: 'Does Not End With',
    isNull: 'Is Null',
    isNotNull: 'Is Not Null',
    isEmpty: 'Is Empty',
    isNotEmpty: 'Is Not Empty',
    isBetween: 'Is Between',
    isNotBetween: 'Is Not Between',
    isInList: 'Is In List',
    isNotInList: 'Is Not In List',
  },
  siderbar: {
    setDisconnectionTime: {
      name: 'Set disconnection time',
      dialogTitle: 'Set database automatic disconnection time',
      settingLabel: 'Automatic disconnection time',
      settingTips: 'Value range:',
    },
    properties: 'Properties',
    viewSource: 'View Source',
    table: {
      showRelatedSequence: 'Show Related Sequence',
      analyze: 'Analyze Table',
      reindex: 'Reindex Table',
      truncate: 'Truncate Table',
      vacuum: 'Vacuum Table',
      setDescription: 'Set Table Description',
      setTablespace: 'Set Tablespace',
      setSchema: 'Set Schema',
    },
  },
  database: {
    database: 'Database',
    open: 'Open Connection',
    close: 'Disconnect',
    create: 'Create Database',
    edit: 'Edit Database Properties',
    remove: 'Remove Database',
    property: 'Show Database Properties',
    name: 'Database Name',
    encoder: 'Database Encoder',
    compatibleType: 'Compatible Type',
    collation: 'Collation',
    characterType: 'Character Type',
    conRestrictions: 'Connection Restrictions',
    connect: 'Connect To Database',
    list: 'Database List',
    placeholder: 'Please enter the filter database object',
    regular_table: 'Regular Table',
    partition_table: 'Partition Table',
    foreign_table: 'Foreign Table',
    trigger: 'Trigger',
    package: 'Package',
    function_process: 'Function/Process',
    view: 'View',
    synonym: 'Synonym',
    sequence: 'Sequence',
    attribute: 'Attribute',
    value: 'Value',
    info: {
      name: 'Datname',
      encoding: 'Encoding',
      datallowconn: 'Datallowconn',
      datconnlimit: 'Datconnlimit',
      dattablespace: 'Dattablespace',
      datcollate: 'Datcollate',
      datctype: 'Datctype',
    },
  },
  userRole: {
    name: 'Users/Roles',
    user: 'User',
    role: 'Role',
    resourcePool: 'Resource Pool',
    privileges: 'Privileges',
    owner: 'Owner',
    roleGroup: 'Role Group',
    adminsGroup: 'Administrators',
    grantor: 'Grantor',
    belong: 'Belong',
    belongTips:
      'Assign GRANT to indicate that the current user/role is a member of the user/role filled in this field',
    propertyList: 'property list',
    create: {
      tabs: ['General', 'Member Properties', 'SQL Preview'],
    },
    privilegeItem: {
      superuser: 'Superuser',
      login: 'Login',
      inherit: 'Inherit',
      replication: 'Replication',
      createRole: 'Create Role',
      createDatabase: 'Create Database',
      auditAdministrator: 'Audit Administrator',
      systemAdministrator: 'System Administrator',
      lock: 'Lock',
    },
    changePassword: {
      title: 'Change User/Role Password',
      oldPassword: 'Old Password',
      newPassword: 'New Password',
      confirmPassword: 'Confirm Password',
      loginUserPassword: 'Operating User Password',
    },
  },
  tablespace: {
    name: 'Tablespaces',
    tablespaceName: 'Tablespace Name',
    tablespaceOwner: 'Tablespace Owner',
    sequentialPageCost: 'Sequential Page Cost',
    randomPageCost: 'Random Page Cost',
    path: 'Path',
    relativePath: 'Is Relative Path',
    maxStorage: 'Max Size',
    unlimitedSize: 'UnlimitedSize',
    create: {
      tabs: ['General', 'SQL Preview'],
    },
  },
  connection: {
    connection: 'Connection',
    name: 'Connection Name',
    testConnection: 'Test Connection',
    new: 'New Connection',
    edit: 'Edit Connection',
    delete: 'Remove Connection',
    deleteInfo: 'Remove Connection Info',
    disAllconnection: 'Disconnect All',
    props: 'Connection Props',
    info: 'Infomation',
    refresh: 'Refresh',
    version: 'Version',
    source: 'Source',
    contentCenter: 'Content Center',
    customConnection: 'Custom Connection',
    database: 'Database',
    databaseName: 'Database Name',
    databaseType: 'Database Type',
    databaseType_holder: 'Please select a database type',
    host: 'Host',
    port: 'Port',
    username: 'Username',
    password: 'Password',
    maximum: 'Maximum',
    attribute: 'Attribute',
    value: 'Value',
    savePassword: 'Save Password',
    connectionWay: 'Connection Way',
    connectionWayList: ['Remote', 'Local'],
    dbPath: 'Database Path',
    createDatabase: {
      name: 'Create Database',
      noExist: 'Create if it does not exist',
      tips: 'When checked: If the database does not exist, it will be automatically created. If it exists, it will be opened. <br/>When not checked: Only existing databases can be opened. If the database does not exist, an error message will appear.',
    },
    currentSessionOnly: 'Current Session Only',
    doNotSave: 'Do Not Save',
    enterPassword: 'Enter the current user password',
    attribute_table: {
      name: 'Connection Name',
      host: 'Host',
      port: 'Port',
      username: 'Username',
      ip: 'Database IP',
      type: 'Database Type',
      version: 'Version',
    },
    rules: {
      host: ['The value does not conform to the host range'],
      port: ['The value does not conform to the port range'],
    },
    success: {
      create: 'Connection succeeded',
      edit: 'Modification succeeded',
    },
  },
  privilege: {
    name: 'Privilege',
    grantOrRevoke: 'Grant/Revoke',
    grantOrRevoke2: 'Grant/Revoke',
    grant: 'Grant',
    revoke: 'Revoke',
    objectSelection: 'Object Selection',
    selectedObjects: 'Selected Objects',
    authorizedUsersRoles: 'Authorized Users/Roles',
    privilegeSelection: 'Privilege Selection',
    sqlPreview: 'Sql Preview',
    backfill: 'Backfill',
    objects: 'Objects',
    operationLog: 'Operation Log',
  },
  create: {
    userRole: 'Create Users/Roles',
    tablespace: 'Create Tablespace',
    mode: 'Create Schema',
    table: 'Create Table',
    foreignTable: 'Create ForeignTable',
    trigger: 'Create Trigger',
    function: 'Create Function',
    process: 'Create Process',
    sql: 'Create Sql',
    anonymous: 'Anonymous Block',
    view: 'Create View',
    synonym: 'Create Synonym',
    sequence: 'Create Sequence',
    terminal: 'Create Terminal',
    openNewTerminal: 'Open New Terminal',
  },
  edit: {
    mode: 'Edit Schema',
    view: 'Edit View',
  },
  delete: {
    userRole: 'Drop User/Role',
    tablespace: 'Drop Tablespace',
    mode: 'Drop Schema',
    table: 'Drop Table',
    foreignTable: 'Drop Foreign Table',
    trigger: 'Drop Trigger',
    package: 'Drop Package',
    functionSP: 'Drop Function/Process',
    view: 'Drop View',
    synonym: 'Drop Synonym',
    sequence: 'Drop Sequence',
  },
  rename: {
    mode: 'Rename Schema',
    table: 'Rename Table',
    trigger: 'Rename Trigger',
  },
  import: {
    tableData: 'Import Table Data',
  },
  export: {
    ddl: 'Export DDL',
    ddlData: 'Export DDL & Data',
    sqlFile: 'Export Table SQl',
    tableData: 'Export Table Data',
    batchDdl: 'Batch Export DDL',
    batchDdlData: 'Batch Export DDL & Data',
    specific: {
      batchSchemaDdl: 'Batch Export Schema DDL',
      batchSchemaDdlData: 'Batch Export Schema DDL & Data',
      batchTableDdl: 'Batch Export Table DDL',
      batchTableDdlData: 'Batch Export Table DDL & Data',
      batchFunctionDdl: 'Batch Export Function/Process DDL',
      batchViewDdl: 'Batch Export View DDL',
      batchSequenceDdl: 'Batch Export Sequence DDL',
      batchSequenceDdlData: 'Batch Export Sequence DDL & Data',
    },
  },
  windows: {
    list: 'Windows',
    placeholder: 'Please enter a window name',
    refresh: 'Refresh Tab',
    closeCurrentTab: 'Close Current Tab',
    closeOtherTab: 'Close Other Tabs',
    closeAllTab: 'Close All Tabs',
    home: 'Operation/Display',
    terminal: 'Terminal',
    renameTerminal: 'Rename Terminal',
    renameTerminalTips: 'Please enter a new name for the {name} terminal',
  },
  functionBar: {
    compile: 'Compile',
    execute: 'Execute',
    stopRun: 'Stop',
    clear: 'Clear',
    startDebug: 'StartDebug',
    stopDebug: 'StopDebug',
    continueStep: 'Continue',
    singleStep: 'SingleStep',
    stepIn: 'StepInto',
    stepOut: 'StepOut',
    format: 'Format',
    coverageRate: 'HistoricalCoverage',
  },
  terminal: {
    importSql: 'Import SQL',
    importSqlText: 'Please choose the format:',
    SQLAssistant: 'SQL assistant',
    uploadSqlFile: 'Upload SQL File',
    resultOfExecution: 'Result Of Execution',
  },
  resultTab: {
    message: 'Message',
    history: 'Execution History',
    result: 'Result',
    closeCurrentTab: 'Close Current Tab',
    closeOtherTab: 'Close Other Tabs',
    closeAllTab: 'Close All Tabs',
  },
  historyTable: {
    column: {
      no: 'No.',
      startTime: 'Starttime',
      status: 'Status',
      sql: 'SQL',
      errorMessage: 'Error Message',
      effectLineNumber: 'Effect Line Number',
      executeTime: 'Executetime',
      operation: 'Operation',
    },
    dialog: {
      title: 'SQL Statement Preview',
    },
  },
  paramsDialog: {
    title: 'Function execution input parameter',
    column: {
      no: 'No',
      parameterName: 'ParameterName',
      dataType: 'DataType',
      value: 'Value',
    },
  },
  coverageDialog: {
    serialNumber: 'Serial Number',
    totalRows: 'Total Rows',
    executionRows: 'Execution Rows',
    totalCoverage: 'Total Coverage',
    allLineNumber: 'All Line Number',
    executionLineNumber: 'Execution Line Number',
    executionCoverage: 'Execution Coverage',
    inputParams: 'Input Params',
    updateTime: 'Update Time',
    deleteMsg: 'Are you sure you want to delete the selected stored procedure query history?',
  },
  debugPane: {
    callStack: 'CallStack',
    callHierarchy: 'CallHierarchy',
    function: 'Function',
    currentLineNumber: 'CurrentLineNumber',
    breakpoint: 'BreakPoint',
    lineNumber: 'LineNumber',
    sentence: 'Sentence',
    variable: 'Variable',
    value: 'value',
    dataType: 'DataType',
    paramType: 'ParamType',
    placeholder: {
      variable: 'Please enter variable name',
    },
  },
  snippets: {
    name: 'Snippets',
    create: 'Create Snippets',
  },
  mode: {
    schema: 'Schema',
    name: 'Schema Name',
    owner: 'Owner',
  },
  createTable: {
    tabs: ['General', 'Column', 'Constraint', 'Indexes', 'Parition', 'SQL Preview'],
    normal: 'NORMAL',
    column: 'Column',
    value: 'Value',
    isPartition: 'is Partition Table',
    general: {
      name: 'tableName',
      ifNotExists: 'IF Not EXISTS',
      tableType: 'Table Type',
      withOIDS: 'WITH OIDS',
      tablespace: 'Tablespace',
      fillFactor: 'Fill Factor',
      storage: 'Table Orientation',
    },
    partition: {
      title: 'Partition',
      partitionType: 'Partition Type',
      intervalValue: 'Interval Value',
      partitionDefinition: 'Partition Definition',
      partitionColumn: 'Partition Column',
      partitionName: 'Partition Name',
      partitionValue: 'Partition Value',
      definePartitionValue: 'Define Partition Value',
      partitionBoundaries: 'Partition Boundaries',
      tablespace: 'Tablespace',
    },
  },
  table: {
    title: 'Table',
    customUniqueKey: 'Custom Unique Key',
    editTableGuide: 'Edit Table Data Wizard',
    tablespace: 'Tablespace',
    general: {
      title: 'General',
    },
    column: {
      title: 'Column',
      columnName: 'ColumnName',
      dataType: 'DataType',
      canBeNull: 'CanBeNULL',
      canBeNotNull: 'CanBeNotNULL',
      defaultValue: 'Default',
      isUnique: 'IsUnique',
      arrayDimensions: 'ArrayDimensions',
      precisionSize: 'Precision/Size',
      bytes: 'Bytes',
      precision: 'Precision',
      range: 'Range',
      scale: 'Scale',
    },
    constraint: {
      title: 'Constraint',
      constrainColumn: 'ConstrainColumn',
      constrainName: 'ConstrainName',
      columnName: 'ColumnName',
      constrainType: 'ConstrainType',
      expression: 'Expression',
      isDeffered: 'IsDeffered',
      schema: 'Schema',
      tablespace: 'Tablespace',
    },
    indexes: {
      title: 'Indexes',
      indexColumn: 'IndexColumn',
      indexName: 'IndexName',
      columnName: 'ColumnName',
      isUnique: 'IsUnique',
      accessMethod: 'AccessMethod',
      expression: 'Expression',
      tablespace: 'Tablespace',
    },
    data: {
      title: 'Data',
      importData: 'Import',
      importFile: 'Import Data File',
      chooseFile: 'choose file',
      exportCurrentPage: 'Export Current Page',
      exportAllPage: 'Export All Page',
    },
    export: {
      selectColumns: 'Select Columns',
      format: 'Format',
      quotes: 'Quotes',
      escape: 'Escape',
      replaceNullWith: 'Replace NULL With',
      encoding: 'Encoding',
      timeFormat: 'Time Format',
      includeHeader: 'Include Header',
      delimiter: 'Delimiter',
      comma: 'Comma',
      tab: 'Tab',
      fourSpaces: '4 Spaces',
      pipe: 'Pipe',
      semicolon: 'Semicolon',
      other: 'Other',
      dialogTitle: 'Export Query Data',
      chooseFormat: 'Please choose to export format:',
    },
    sort: {
      title: 'Sort',
    },
    filter: {
      title: 'Filter',
      showColumns: 'Show Columns',
      pleaseEnter: 'Please enter a value of type {name}',
    },
  },
  foreignTable: {
    warning:
      'Before creating the appearance, please install the extension specified by the selected external data source type in advance, otherwise it may cause the appearance creation to fail!',
    deleteForeignServerTips: 'Are you sure you want to delete {name} external server?',
    testRemoteConnection: 'Test Remote Connection',
    confirmSave:
      'The current appearance does not have a unique key set and does not support setting on the appearance. After manipulating the data, it may affect the existing data. Please confirm whether to continue the operation?',
    foreign: {
      title: 'Foreign',
      foreignName: 'Foreign Name',
      ifNotExists: 'IF Not EXISTS',
      foreignDataSourceType: 'Foreign Data SourceType',
      foreignServer: 'Foreign Server',
      foreignDatabase: 'Foreign Database',
      foreignSchema: 'Foreign Schema',
      userMapping: 'User Mapping',
      remoteSchema: 'Remote Schema',
      remoteDatabase: 'Remote Database',
      remoteTable: 'Remote Table',
      remoteFilePath: 'Remote File Path',
      remoteFileFormat: 'Remote File Format',
      quotes: 'Quotes',
      escape: 'Escape',
      replaceNullWith: 'Replace Null With',
      encoding: 'Encoding',
      comma: 'Comma',
      tab: 'Tab',
      fourSpaces: 'Four Spaces',
      pipe: 'Pipe',
      semicolon: 'Semicolon',
      other: 'Other',
      unmatchedEmptyString: 'Unmatched Empty String',
    },
    columns: {
      title: 'Columns',
      foreignColumnName: 'ForeignColumnName',
      remoteColumnName: 'RemoteColumnName',
      dataType: 'DataType',
      canBeNull: 'CanBeNULL',
      defaultValue: 'Default',
      isUnique: 'IsUnique',
      precisionSize: 'Precision/Size',
      range: 'Range',
    },
    data: {
      title: 'Data',
    },
    createForeignServerDialog: {
      title: 'Create Foreign Server',
      foreignServer: 'Foreign Server',
      remoteServerHost: 'Remote Server Host',
      remoteServerPort: 'Remote Server Port',
      remoteDatabase: 'Remote Database',
      remoteUserName: 'Remote User Name',
      remotePassword: 'Remote Password',
    },
  },
  trigger: {
    name: 'Trigger',
    enableTrigger: 'Enable Trigger',
    disableTrigger: 'Disable Trigger',
    create: {
      tabs: ['General', 'SQL Preview'],
    },
    general: {
      name: 'Trigger Name',
      status: 'Trigger Status',
      type: 'Trigger Type',
      tableName: 'Trigger Table',
      tableName2: 'Trigger View',
      time: 'Trigger Time',
      frequency: 'Trigger Frequency',
      function: 'Trigger Function',
      event: 'Trigger Event',
      condition: 'Trigger Condition',
      field: 'UPDATE Field',
    },
    createTriggerFunction: {
      title: 'Create Trigger Function',
      function: 'Trigger Function',
    },
  },
  view: {
    title: 'View',
    base: 'General',
    preview: 'SQL preview',
    name: 'Name',
    type: 'Type',
    materializedView: 'Materialized View',
    objectMode: 'Objectmode',
    code: 'Code',
  },
  sequence: {
    base: 'General',
    preview: 'SQL preview',
    name: 'Name',
    increment: 'Increment',
    startValue: 'Start Value',
    minValue: 'Min Value',
    maxValue: 'Max Value',
    cacheValue: 'Cache Value',
    isCycle: 'Cycle',
    belongObject: 'Belong Object',
    mode: 'Schema',
    table: 'Table',
    column: 'Column',
    ifNotExists: 'IF Not EXISTS',
  },
  synonym: {
    base: 'General',
    preview: 'SQL Preview',
    name: 'Name',
    objectOwner: 'Object Owner',
    objectType: 'Object Type',
    objectName: 'Object Name',
    rplaceExistingSynonyms: 'Replace Existing Synonyms',
    attribute: {
      serialNo: 'Serial No',
      attr: 'Attribute',
    },
  },
  job: {
    name: 'Scheduled Task',
    jobId: 'Job ID',
    jobContent: 'Job Content',
    databaseName: 'DatabaseName',
    jobStatus: 'Job Status',
    interval: 'Interval',
    startDate: 'Start Date',
    nextRunDate: 'Next Run Date',
    failureCount: 'Failure Count',
    failureMsg: 'Failure Message',
    lastEndDate: 'Last End Date',
    lastSucDate: 'Last Success Date',
    creator: 'Creator',
    executor: 'Executor',
    operation: 'Operation',
    dialog: {
      title: ['Create Scheduled Task', 'Edit Scheduled Task'],
      nextRunDate: 'Next Job Run Time',
      dateExpression: 'Time Expression',
      contentTips: 'SQL statement to execute',
      dateTips:
        'The default value is the current system time (sysdate). If it is in the past, it indicates immediate execution when submitting the assignment.',
      expressionTips:
        'The time expression used to calculate the next job run time can be an interval expression or a sysdate plus a numeric value (for example, sysdate+1.0/24). If it is a null value or the string "null", it means it will only be executed once.',
    },
    statusMap: {
      r: 'running',
      s: 'successfully',
      f: 'failed',
      d: 'disable',
    },
  },
};
